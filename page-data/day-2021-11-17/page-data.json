{"componentChunkName":"component---src-templates-blog-post-index-jsx","path":"/day-2021-11-17/","result":{"data":{"site":{"siteMetadata":{"title":"QDS"}},"markdownRemark":{"id":"f56078d8-8205-5d44-a1c9-a961d2861caa","excerpt":"😄每日更新😄     最近在开始看《程序员修炼之道》，这是我很早就购买了的书，但看了几页就被闲置了。好在最近公司的任务不多，决定重新开始看。目前我印象很深刻的一个词语是ETC(Easier To Change)。我所理解的ETC…","html":"<p>😄每日更新😄</p>\n<hr>\n<p>    最近在开始看《程序员修炼之道》，这是我很早就购买了的书，但看了几页就被闲置了。好在最近公司的任务不多，决定重新开始看。目前我印象很深刻的一个词语是ETC(Easier To Change)。我所理解的ETC是指，目前所写的代码可以更好的适应未来的变化，而不是把所有的变化都写在代码里。但这种东西都比较飘渺，没有人能够预测未来，能做到的只有根据以往的经验来预测未来可能出现的情况，然后提前做好准备。但是很多时候我们基本我们基本都是完全未知的，所以我们不能预测未来，只能做好当前。<br>\n   我目前一个比较大的困惑便是如果为了一个功能写了一个函数，看起来很完美，但其实后期会涉及很多的改动。我分析主要原因就是虽然一个函数只处理一件事，但后期需求往往会增加，此时我的选择就是不断的给这个函数添加新的参数，修改函数体以适应不同的需求。但这个会导致我需要把每一个调用这个函数的地方都重新改一下，传入新参数，究极蠢，即使可以使用默认参数。看了书的这一部分后，我觉得其实可以使用react的高阶组件那种思想，维持原来的函数不变，重新建立函数传参数，但这样就要求调用的函数足够简单并且是有返回值的。所以归根结底还是要把函数写得足够简单，但我目前确实还掌握不了这个度。<br>\n   确实需要跟多的编码经验才能写出更加抗打的代码。这次的MD文章是在Copilot的协助下完成的，感觉还不错。我已经很期待AI直接根据我的需求写一个完整的代码给我了。</p>","frontmatter":{"title":"随心乱记","date":"November 17, 2021","description":"Hello World"}}},"pageContext":{"slug":"/day-2021-11-17/","previous":{"id":"9fbed31b-85f8-5cc3-a0e0-e3a91d10190f","frontmatter":{"title":"History of the Web（转载）","tags":["web"],"date":"2021年06月24日"},"fields":{"slug":"/brower-history/"},"excerpt":"web的历史,我是在jQuery和MVC那个时期入的行，看了还蛮有感触的。"},"next":null}}}